---
import SideBar from "../layouts/SideBar.astro";
---

<SideBar/>

<div class="container">
    <h1 class="page-title">오늘의 급식</h1>
    <h2 class="now"></h2>

    <section class="meal-card">
        <div id="meal" class="meal-container">
            <div class="meal-box">급식을 불러오는 중...</div>
        </div>

        <div class="meal-buttons">
            <button data-meal="1">조식</button>
            <button data-meal="2" class="active">중식</button>
            <button data-meal="3">석식</button>
        </div>
    </section>

    <section class="cal-card">
        <div class="nutrition-box" id="cal-box">칼로리를 불러오는 중...</div>
    </section>

    <section class="nutrition-card">
        <div class="nutrition-box" id="nut-box">영양정보를 불러오는 중...</div>
    </section>
</div>

<style is:global>

    .container {
        max-width: 650px;
        margin: 5rem auto 0 auto;
        padding: 1rem;
    }

    .page-title {
        text-align: center;
        font-size: 1.8rem;
        margin-bottom: 1rem;
        color: #c0aaff;
    }

    .now {
        text-align: center;
        font-size: 1.6rem;
        margin-top: -0.2rem;
        margin-bottom: 1rem;
        color: #c0aaff;
        font-weight: 700;
    }

    /* 카드 스타일 */
    .meal-card, .cal-card, .nutrition-card {
        background: #2a2a3f;
        padding: 1.8rem 1.5rem;
        border-radius: 1.5rem;
        box-shadow: 0 8px 20px rgba(0,0,0,0.4);
        margin-bottom: 1rem;
        transition: transform 0.2s ease;
    }

    .meal-card:hover, .cal-card:hover, .nutrition-card:hover {
        transform: translateY(-3px);
    }

    /* 카드 내부 박스 */
    .meal-box, .nutrition-box {
        background: #33334d;
        border-radius: 1rem;
        padding: 1rem;
        box-shadow: inset 0 2px 6px rgba(0,0,0,0.2);
        color: #f0f0f0;
    }

    /* 버튼 스타일 */
    .meal-buttons {
        display: flex;
        justify-content: center;
        gap: 0.6rem;
        margin-top: 1rem;
    }

    .meal-buttons button {
        flex: 1;
        max-width: 120px;
        padding: 0.5rem 1rem;
        border-radius: 50px;
        border: none;
        background: #3a2f5c;
        color: #e0e0e0;
        cursor: pointer;
        font-weight: 600;
        transition: 0.2s all;
    }

    .meal-buttons button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.5);
    }

    .meal-buttons button.active {
        background: #a291ff;
        color: #1e1e2f;
    }

    /* 섹션 제목 */
    .highlight-title {
        font-weight: 700;
        font-size: 1.1rem;
        color: #a291ff;
        border-left: 4px solid #a291ff;
        padding-left: 0.6rem;
        margin-bottom: 0.6rem;
    }

    /* 항목 스타일 */
    .section-item {
        padding: 0.4rem 0.6rem;
        margin-bottom: 0.4rem;
        background: #3e3e5a;
        border-radius: 0.6rem;
        font-size: 0.95rem;
        color: #f0f0f0;
    }

    @media (max-width: 600px) {
        .meal-card, .cal-card, .nutrition-card { padding: 1.2rem; }
        .meal-box, .nutrition-box { font-size: 0.9rem; padding: 0.6rem; }
    }
</style>

<script>
    import { loadMeal } from "../utils/mealApp.ts";
    import { formatDate } from "../utils/dateUtils.ts";

    const mealDiv = document.getElementById("meal") as HTMLDivElement;
    const calDiv = document.getElementById("cal-box") as HTMLDivElement;
    const nutDiv = document.getElementById("nut-box") as HTMLDivElement;
    const mealButtons = document.querySelectorAll<HTMLButtonElement>(".meal-buttons button");

    const messages = {
        loading: {
            meal: "급식을 불러오는 중...",
            cal: "칼로리를 불러오는 중...",
            nut: "영양정보를 불러오는 중..."
        },
        empty: {
            meal: "<div class='meal-box'>오늘은 급식이 없습니다.</div>",
            cal: "",
            nut: ""
        }
    };

    function setState(state: "loading" | "empty") {
        mealDiv.innerHTML = messages[state].meal;
        calDiv.innerHTML = messages[state].cal;
        nutDiv.innerHTML = messages[state].nut;
    }

    function renderSection(title: string, content: string | string[]) {
        const items = Array.isArray(content)
            ? content.map(d => `<div class="section-item">${d}</div>`).join("")
            : `<div class="section-item">${content}</div>`;

        return `
            <div>
                <div class="highlight-title">${title}</div>
                ${items}
            </div>
        `;
    }

    async function renderMeal(mealType: string = "2") {
        setState("loading");

        const mealData = await loadMeal(mealType);

        if (!mealData || !mealData.dishes?.length) {
            setState("empty");
            return;
        }

        mealDiv.innerHTML = `<div class="meal-box">${renderSection("급식", mealData.dishes)}</div>`;
        calDiv.innerHTML = `<div class="meal-box">${renderSection("칼로리", mealData.cal)}</div>`;
        nutDiv.innerHTML = `<div class="meal-box">${renderSection("영양정보", mealData.nutrition)}</div>`;
    }

    mealButtons.forEach(btn => {
        btn.addEventListener("click", () => {
            mealButtons.forEach(b => b.classList.remove("active"));
            btn.classList.add("active");
            renderMeal(btn.dataset.meal ?? "2");
        });
    });

    window.addEventListener("DOMContentLoaded", () => {
        renderMeal("2");

        const nowElement = document.querySelector(".now");
        if (nowElement) {
            nowElement.textContent = formatDate(new Date());
        }
    });
</script>
